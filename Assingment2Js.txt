1. What is `NPM`?
 package manager (npm) is one of the largest software registries in the world. 
It comes bundled with node.js, an open-source server environment.
 
how does npm work
Here are the three defining roles of npm:

Repository – npm is a widely used repository for publishing open-source Node projects, where developers can share their source code with other npm users. Angular, React, and jQuery are some of the packages you can download from an npm repository.
Command-line interface (CLI) – developers run the npm CLI from a terminal or a command-line tool to install or uninstall packages and manage versions or dependencies.
Registry – any package or module you install using the npm CLI is downloaded from the npm public registry, the JavaScript software database.

2 What is `Parcel/Webpack`? Why do we need it?
Parcel and webpack are the bundlers used mostly for JavaScript or Typescript code that helps you to minify, clean, and make your code compact so that it becomes easier to send a request or receive the response from the server 
when it usually takes you to transfer multiple files without using any bundler for loading the page of your application.


3What is `.parcel-cache`
The .cache folder (or .parcel-cache in parcel v2) stores information about your project when parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze everything from scratch. 
It's a key reason why parcel can be so fast in development mode.

4- What is `npx` ?
NPX is an NPM package runner that makes it really easy to install any sort of node executable that would have normally been installed using NPM

5 What is difference between `dependencies` vs `devDependencies`
The difference between these two, is that devDependencies are modules which are only required during development, while dependencies are modules which are also required at runtime. To save a dependency as a devDependency on installation we need to do an npm install --save-dev, instead of just an npm install --save.

6.- What is Tree Shaking?
Tree shaking is a term commonly used within a JavaScript context to describe the removal of dead code.
 
7.what is hot module Replacement?
Hot Module Replacement “Hot Module Replacement” (HMR) is a feature to inject updated modules into the active runtime. It’s like LiveReload for every module.


8.benifts of parcel:
HMR-hot module reloading
bundling
minify
cleaning code
dev production build
super Fast build algorithm
image optimization
caching while devlopement
compression
compatable with older version of browser
zero config

9.What is `.gitignore`? What should we add and not add into it?
The.gitignore file is a text file that tells Git which files or folders to ignore in a project.
 A local.gitignore file is usually placed in the root directory of a project.
 You can also create a global.gitignore file and any entries in that file will be ignored in all of your Git repositories.

10.what is package.json and package-lock.json
package.json:
It is used for installing packages in a Node.js project.
It is not just for installing the dependencies but also for other purposes like defining project properties, description, author & license information, scripts to run via npm, etc.
It keeps the minimum version an application needs.
Updating packages using npm install will update changes related to package information in package-lock.json and not in package.json.

package-lock.json:
It is solely used for locking dependencies to a specific version.
It keeps the exact version of the installed packages so that we can re-install those packages with exact same versions.

https://techtalkbook.com/package-json-vs-package-lock-json/


11.Why should i not modify 'package-lock.json/
-to avoid issue and confusion
Make sure you don’t change package-lock.json directly. That’s being handled automatically by NPM. It reflects changes made to package.json to package-lock.json and keeps it up to date.



12.What is `node_modules` ? Is it a good idea to push that on git?
The node_modules/ folder is the folder where all packages required by your JavaScript project are downloaded and installed. This folder is commonly excluded from a remote repository because it has a large size and you shouldn’t add code that you didn’t write to the repository.

13.What is a dist folder?
The dist folder, short for distribution folder. It is dynamically generated when using the nuxt generate command and includes the generated production ready HTML files and assets that are necessary to deploy and run your statically generated Nuxt.

What is the use of dist folder?
The /dist folder contains the minimized version of the source code. The code present in the /dist folder is actually the code which is used on production web applications. Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.

14.What is Browserslist? 
Browserslist is a tool that allows specifying which browsers should be supported in your frontend app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, Angular and Vue, but it's not limited to them.

15.^ - caret and ~ - tilda
The characters that come before the version numbers are prefixes that we refer to as the caret (^) and tilde (~) signs. They are added by developers (or npm) to indicate restrictions on which software version numbers can be used as a dependency in your project. These number schemes follow a convention known as semantic versioning, or semver.

16.Scripts tag in react:

Package.json has various sections, scripts is one of them, which allows you to write npm script which we can run using npm run <script-name>.

Run npm run to see available scripts. Binaries of locally install packages are made available in the PATH, so you can run them by name instead of pointing to node_modules/.bin/name.

Typically we can have a scripts section, where we define json like key value script , Where Key is the command name which we will use to run and value is the command we want to run. A Example package.json is given below.

"scripts": {
  "build": "react-scripts build",
  "code:check": "yarn code:lint && yarn code:format --check",
  "validate": "run-p --print-label lint typecheck test build",
  "preversion": "git pull",
  "postversion": "git push && git push --tags"
},
so to run the build we have to do

npm run build
and it will execute react-scripts build script. which in-turn build our code.

